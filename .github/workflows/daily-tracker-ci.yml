name: Daily Tracker CI/CD

on:
  pull_request:
    branches: [main]
    paths: ['daily-tracking/**']
  push:
    branches: [main]
    paths: ['daily-tracking/**']

jobs:
  lint-and-build:
    name: Lint and Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./daily-tracking
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './daily-tracking/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Check TypeScript
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build
        env:
          # Add any required environment variables for build
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST || 'postgresql://test:test@localhost:5432/test' }}

      - name: Run custom tests
        run: npm run test:all
        continue-on-error: true # Since these are custom integration tests

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./daily-tracking

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerable dependencies
        run: npx audit-ci --high

  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR title format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?\:.+ ]]; then
            echo "‚ùå PR title must follow conventional commits format:"
            echo "   feat: add new feature"
            echo "   fix: resolve bug"
            echo "   docs: update documentation"
            echo "   etc."
            exit 1
          fi
          echo "‚úÖ PR title format is valid"

      - name: Check for large files
        run: |
          large_files=$(find daily-tracking -type f -size +1M 2>/dev/null | head -10)
          if [ ! -z "$large_files" ]; then
            echo "‚ö†Ô∏è Large files detected:"
            echo "$large_files"
            echo "Consider using Git LFS or optimizing these files"
          fi

      - name: Verify no secrets in code
        run: |
          if grep -r -i "api[_-]key\|secret.*=\|password.*=\|token.*=" daily-tracking/src --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v "// OK: " | head -5; then
            echo "‚ùå Potential secrets found in code. Please review and use environment variables."
            exit 1
          fi
          echo "‚úÖ No obvious secrets found in code"

  deployment-preview:
    name: Generate Deployment Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [lint-and-build]
    defaults:
      run:
        working-directory: ./daily-tracking
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './daily-tracking/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build for preview
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST || 'postgresql://test:test@localhost:5432/test' }}

      - name: Comment deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üöÄ Deployment Preview
              
              ‚úÖ Build completed successfully!
              
              **Build Details:**
              - Node.js: 18
              - Build time: ${{ steps.build.outputs.time || 'N/A' }}
              - Status: Ready for review
              
              **Next Steps:**
              1. Code review required
              2. All checks must pass
              3. Merge to main for production deployment
              `
            })
