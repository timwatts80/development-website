(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function e(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(s){if(s.ep)return;s.ep=!0;const i=e(s);fetch(s.href,i)}})();class m{constructor(){this.canvas=null,this.ctx=null,this.isDrawing=!1,this.lastX=0,this.lastY=0,this.currentColor="#000000",this.currentSize=5,this.socket=null,this.userId=this.generateUserId(),this.userName=this.generateUserName(),this.users=new Map,this.cursors=new Map,this.isConnected=!1,this.currentStroke=[],this.strokeId=0,this.lastTouchX=0,this.lastTouchY=0,this.points=[],this.smoothing=1,this.minDistance=2,this.smoothingBuffer=[],this.taper=.5,this.velocityHistory=[],this.lastTimestamp=0,this.brushType="velocity",this.strokeProgress=0}generateUserId(){return"user_"+Math.random().toString(36).substr(2,9)}generateUserName(){const t=["Creative","Artistic","Colorful","Bold","Bright","Vivid","Dynamic","Elegant"],e=["Artist","Painter","Designer","Creator","Sketcher","Illustrator"];return t[Math.floor(Math.random()*t.length)]+e[Math.floor(Math.random()*e.length)]+Math.floor(Math.random()*100)}init(){this.setupCanvas(),this.setupUI(),this.setupEventListeners(),this.connectToServer(),this.updateConnectionStatus("connecting","Connecting to server...")}setupCanvas(){this.canvas=document.getElementById("drawing-canvas"),this.ctx=this.canvas.getContext("2d"),this.resizeCanvas(),window.addEventListener("resize",()=>this.resizeCanvas()),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.imageSmoothingEnabled=!0,this.ctx.imageSmoothingQuality="high";const t=window.devicePixelRatio||1;t>1&&(this.canvas.style.width=this.canvas.width+"px",this.canvas.style.height=this.canvas.height+"px",this.canvas.width*=t,this.canvas.height*=t,this.ctx.scale(t,t))}resizeCanvas(){const e=this.canvas.parentElement.getBoundingClientRect(),n=window.devicePixelRatio||1;this.canvas.width=e.width*n,this.canvas.height=e.height*n,this.canvas.style.width=e.width+"px",this.canvas.style.height=e.height+"px",this.ctx.scale(n,n),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.imageSmoothingEnabled=!0,this.ctx.imageSmoothingQuality="high"}setupUI(){const t=document.getElementById("brush-size"),e=document.getElementById("brush-size-display");t.addEventListener("input",o=>{this.currentSize=parseInt(o.target.value),e.textContent=`${this.currentSize}px`});const n=document.getElementById("taper"),s=document.getElementById("taper-display");n.addEventListener("input",o=>{this.taper=parseInt(o.target.value)/100,s.textContent=`${o.target.value}%`}),document.getElementById("brush-type").addEventListener("change",o=>{this.brushType=o.target.value,console.log(`🖌️ Brush type changed to: ${this.brushType}`)}),document.getElementById("color-picker").addEventListener("change",o=>{this.currentColor=o.target.value}),document.getElementById("clear-canvas").addEventListener("click",()=>{this.clearCanvas()}),document.getElementById("save-canvas").addEventListener("click",()=>{this.saveCanvas()})}setupEventListeners(){this.canvas.addEventListener("mousedown",t=>this.startDrawing(t)),this.canvas.addEventListener("mousemove",t=>this.draw(t)),this.canvas.addEventListener("mouseup",()=>this.stopDrawing()),this.canvas.addEventListener("mouseout",()=>this.stopDrawing()),this.canvas.addEventListener("touchstart",t=>this.handleTouchStart(t),{passive:!1}),this.canvas.addEventListener("touchmove",t=>this.handleTouchMove(t),{passive:!1}),this.canvas.addEventListener("touchend",()=>this.stopDrawing(),{passive:!1}),this.canvas.addEventListener("mousemove",t=>{this.isDrawing||this.sendCursorPosition(t)})}connectToServer(){setTimeout(()=>{this.isConnected=!0,this.updateConnectionStatus("connected","Connected to server"),this.updateUserCount(1),this.addUser(this.userId,this.userName,this.currentColor)},1e3)}getRandomColor(){const t=["#FF6B6B","#4ECDC4","#45B7D1","#96CEB4","#FFEAA7","#DDA0DD","#98D8C8","#F7DC6F"];return t[Math.floor(Math.random()*t.length)]}startDrawing(t){this.isDrawing=!0;const e=this.canvas.getBoundingClientRect();this.lastX=t.clientX-e.left,this.lastY=t.clientY-e.top,this.points=[{x:this.lastX,y:this.lastY,timestamp:Date.now()}],this.velocityHistory=[0],this.lastTimestamp=Date.now(),this.strokeProgress=0,this.currentStroke=[{x:this.lastX,y:this.lastY,color:this.currentColor,size:this.currentSize}],this.strokeId++}draw(t){if(!this.isDrawing)return;const e=this.canvas.getBoundingClientRect(),n=t.clientX-e.left,s=t.clientY-e.top,i=Date.now(),r=Math.sqrt(Math.pow(n-this.lastX,2)+Math.pow(s-this.lastY,2));if(r<this.minDistance)return;const o=i-this.lastTimestamp,a=o>0?r/o:0;this.velocityHistory.push(a),this.velocityHistory.length>5&&this.velocityHistory.shift(),this.strokeProgress+=r/1e3,this.points.push({x:n,y:s,timestamp:i}),this.points.length>10&&this.points.shift(),this.drawSmoothLine(n,s),this.currentStroke.push({x:n,y:s,color:this.currentColor,size:this.currentSize}),this.sendDrawingData({type:"draw",strokeId:this.strokeId,points:this.currentStroke,userId:this.userId}),this.lastX=n,this.lastY=s,this.lastTimestamp=i}drawSmoothLine(t,e){if(this.points.length<4){const p=this.calculateTaperedSize(this.currentSize);this.drawLine(this.lastX,this.lastY,t,e,this.currentColor,p);return}const n=this.points.length,s=this.points[n-4],i=this.points[n-3],r=this.points[n-2],o=this.points[n-1],a=this.averagePoint(s,i,r),h=this.averagePoint(i,r,o),l=this.calculateControlPoint(s,a,r,!0),u=this.calculateControlPoint(a,h,o,!1),d=this.calculateTaperedSize(this.currentSize);this.drawTaperedBezier(a,l,u,h,d)}calculateTaperedSize(t){if(this.taper===0)return t;if(this.brushType==="pen"){const e=Math.min(this.strokeProgress,1),s=.1+.9*(1/(1+Math.exp(8*(e-.7)))),i=1-this.taper*(1-s),r=t*.05;return Math.max(t*i,r)}else{if(this.velocityHistory.length===0)return t;const e=this.velocityHistory.reduce((o,a)=>o+a,0)/this.velocityHistory.length,i=1-Math.min(e/2,1)*this.taper*.7,r=t*.2;return Math.max(t*i,r)}}drawTaperedBezier(t,e,n,s,i){this.ctx.globalCompositeOperation="source-over",this.ctx.strokeStyle=this.currentColor,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineWidth=i,this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.bezierCurveTo(e.x,e.y,n.x,n.y,s.x,s.y),this.ctx.stroke()}averagePoint(t,e,n){return{x:(t.x+e.x+n.x)/3,y:(t.y+e.y+n.y)/3}}calculateControlPoint(t,e,n,s){const i=this.smoothing*.2;return s?{x:e.x+(n.x-t.x)*i,y:e.y+(n.y-t.y)*i}:{x:e.x-(n.x-t.x)*i,y:e.y-(n.y-t.y)*i}}stopDrawing(){this.isDrawing&&(this.isDrawing=!1,this.currentStroke.length>0&&this.sendDrawingData({type:"strokeComplete",strokeId:this.strokeId,points:this.currentStroke,userId:this.userId}),this.currentStroke=[])}handleTouchStart(t){t.preventDefault();const e=t.touches[0],n=this.canvas.getBoundingClientRect();this.isDrawing=!0,this.lastTouchX=e.clientX-n.left,this.lastTouchY=e.clientY-n.top,this.lastX=this.lastTouchX,this.lastY=this.lastTouchY,this.points=[{x:this.lastX,y:this.lastY,timestamp:Date.now()}],this.velocityHistory=[0],this.lastTimestamp=Date.now(),this.strokeProgress=0,this.currentStroke=[{x:this.lastX,y:this.lastY,color:this.currentColor,size:this.currentSize}],this.strokeId++}handleTouchMove(t){if(t.preventDefault(),!this.isDrawing)return;const e=t.touches[0],n=this.canvas.getBoundingClientRect(),s=e.clientX-n.left,i=e.clientY-n.top,r=Date.now(),o=Math.sqrt(Math.pow(s-this.lastX,2)+Math.pow(i-this.lastY,2));if(o<this.minDistance*.7)return;const a=r-this.lastTimestamp,h=a>0?o/a:0;this.velocityHistory.push(h),this.velocityHistory.length>5&&this.velocityHistory.shift(),this.strokeProgress+=o/1e3,this.points.push({x:s,y:i,timestamp:r}),this.points.length>10&&this.points.shift(),this.drawSmoothLine(s,i),this.currentStroke.push({x:s,y:i,color:this.currentColor,size:this.currentSize}),this.sendDrawingData({type:"draw",strokeId:this.strokeId,points:this.currentStroke,userId:this.userId}),this.lastX=s,this.lastY=i,this.lastTimestamp=r}drawLine(t,e,n,s,i,r){this.ctx.globalCompositeOperation="source-over",this.ctx.strokeStyle=i,this.ctx.lineWidth=r,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(n,s),this.ctx.stroke()}sendDrawingData(t){console.log("Drawing data:",t)}sendCursorPosition(t){const e=this.canvas.getBoundingClientRect();t.clientX-e.left,t.clientY-e.top}clearCanvas(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.sendDrawingData({type:"clear",userId:this.userId})}saveCanvas(){const t=document.createElement("a");t.download=`collaborative-canvas-${Date.now()}.png`,t.href=this.canvas.toDataURL(),t.click()}updateConnectionStatus(t,e){const n=document.getElementById("status-indicator"),s=document.getElementById("status-text");n.className=`status-indicator ${t}`,s.textContent=e}updateUserCount(t){document.getElementById("user-count").textContent=`${t} user${t!==1?"s":""} online`}addUser(t,e,n){this.users.set(t,{name:e,color:n}),this.updateUsersList(),this.updateUserCount(this.users.size)}removeUser(t){this.users.delete(t),this.removeCursor(t),this.updateUsersList(),this.updateUserCount(this.users.size)}updateUsersList(){const t=document.getElementById("users-list");t.innerHTML="",this.users.forEach((e,n)=>{const s=document.createElement("div");s.className="user-item",s.innerHTML=`
                <div class="user-color" style="background-color: ${e.color}"></div>
                <span>${e.name}</span>
            `,t.appendChild(s)})}showCursor(t,e,n){if(!this.users.has(t))return;const s=this.users.get(t);let i=this.cursors.get(t);i||(i=document.createElement("div"),i.className="user-cursor",i.setAttribute("data-username",s.name),i.style.borderColor=s.color,i.style.backgroundColor=s.color+"40",document.getElementById("cursors-layer").appendChild(i),this.cursors.set(t,i)),i.style.left=e+"px",i.style.top=n+"px",i.style.display="block"}removeCursor(t){const e=this.cursors.get(t);e&&(e.remove(),this.cursors.delete(t))}}document.addEventListener("DOMContentLoaded",()=>{new m().init()});
