(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();class p{constructor(){this.canvas=null,this.ctx=null,this.isDrawing=!1,this.lastX=0,this.lastY=0,this.currentColor="#000000",this.currentSize=5,this.socket=null,this.userId=this.generateUserId(),this.userName=this.generateUserName(),this.users=new Map,this.cursors=new Map,this.isConnected=!1,this.currentStroke=[],this.strokeId=0,this.lastTouchX=0,this.lastTouchY=0,this.points=[],this.smoothing=1,this.minDistance=1.5,this.smoothingBuffer=[],this.taper=.5,this.velocityHistory=[],this.accelerationHistory=[],this.lastTimestamp=0,this.lastVelocity=0,this.strokeProgress=0,this.totalStrokeDistance=0,this.strokeDistances=[]}generateUserId(){return"user_"+Math.random().toString(36).substr(2,9)}generateUserName(){const t=["Creative","Artistic","Colorful","Bold","Bright","Vivid","Dynamic","Elegant"],e=["Artist","Painter","Designer","Creator","Sketcher","Illustrator"];return t[Math.floor(Math.random()*t.length)]+e[Math.floor(Math.random()*e.length)]+Math.floor(Math.random()*100)}init(){this.setupCanvas(),this.setupUI(),this.setupEventListeners(),this.connectToServer(),this.updateConnectionStatus("connecting","Connecting to server...")}setupCanvas(){this.canvas=document.getElementById("drawing-canvas"),this.ctx=this.canvas.getContext("2d"),this.resizeCanvas(),window.addEventListener("resize",()=>this.resizeCanvas()),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.imageSmoothingEnabled=!0,this.ctx.imageSmoothingQuality="high";const t=window.devicePixelRatio||1;t>1&&(this.canvas.style.width=this.canvas.width+"px",this.canvas.style.height=this.canvas.height+"px",this.canvas.width*=t,this.canvas.height*=t,this.ctx.scale(t,t))}resizeCanvas(){const e=this.canvas.parentElement.getBoundingClientRect(),s=window.devicePixelRatio||1;this.canvas.width=e.width*s,this.canvas.height=e.height*s,this.canvas.style.width=e.width+"px",this.canvas.style.height=e.height+"px",this.ctx.scale(s,s),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.imageSmoothingEnabled=!0,this.ctx.imageSmoothingQuality="high"}setupUI(){const t=document.getElementById("brush-size"),e=document.getElementById("brush-size-display");t.addEventListener("input",o=>{this.currentSize=parseInt(o.target.value),e.textContent=`${this.currentSize}px`});const s=document.getElementById("taper"),i=document.getElementById("taper-display");s.addEventListener("input",o=>{this.taper=parseInt(o.target.value)/100,i.textContent=`${o.target.value}%`}),document.getElementById("color-picker").addEventListener("change",o=>{this.currentColor=o.target.value}),document.getElementById("clear-canvas").addEventListener("click",()=>{this.clearCanvas()}),document.getElementById("save-canvas").addEventListener("click",()=>{this.saveCanvas()})}setupEventListeners(){this.canvas.addEventListener("mousedown",t=>this.startDrawing(t)),this.canvas.addEventListener("mousemove",t=>this.draw(t)),this.canvas.addEventListener("mouseup",()=>this.stopDrawing()),this.canvas.addEventListener("mouseout",()=>this.stopDrawing()),this.canvas.addEventListener("touchstart",t=>this.handleTouchStart(t),{passive:!1}),this.canvas.addEventListener("touchmove",t=>this.handleTouchMove(t),{passive:!1}),this.canvas.addEventListener("touchend",()=>this.stopDrawing(),{passive:!1}),this.canvas.addEventListener("mousemove",t=>{this.isDrawing||this.sendCursorPosition(t)})}connectToServer(){setTimeout(()=>{this.isConnected=!0,this.updateConnectionStatus("connected","Connected to server"),this.updateUserCount(1),this.addUser(this.userId,this.userName,this.currentColor)},1e3)}getRandomColor(){const t=["#FF6B6B","#4ECDC4","#45B7D1","#96CEB4","#FFEAA7","#DDA0DD","#98D8C8","#F7DC6F"];return t[Math.floor(Math.random()*t.length)]}startDrawing(t){this.isDrawing=!0;const e=this.canvas.getBoundingClientRect();this.lastX=t.clientX-e.left,this.lastY=t.clientY-e.top,this.points=[{x:this.lastX,y:this.lastY,timestamp:Date.now(),velocity:0,acceleration:0,distance:0}],this.velocityHistory=[0],this.accelerationHistory=[0],this.lastTimestamp=Date.now(),this.lastVelocity=0,this.currentStroke=[{x:this.lastX,y:this.lastY,color:this.currentColor,size:this.currentSize}],this.strokeId++}draw(t){if(!this.isDrawing)return;const e=this.canvas.getBoundingClientRect(),s=t.clientX-e.left,i=t.clientY-e.top,n=Date.now(),o=Math.sqrt(Math.pow(s-this.lastX,2)+Math.pow(i-this.lastY,2)),c=n-this.lastTimestamp,r=c>0?o/c:0,h=Math.max(this.minDistance*.5,Math.min(this.minDistance*2,this.minDistance*(1+r*.3)));if(o<h)return;const a=Math.abs(r-this.lastVelocity)/Math.max(c,1);this.velocityHistory.push(r),this.accelerationHistory.push(a),this.velocityHistory.length>8&&(this.velocityHistory.shift(),this.accelerationHistory.shift()),this.points.push({x:s,y:i,timestamp:n,velocity:r,acceleration:a}),this.points.length>12&&this.points.shift(),this.drawSmoothLine(s,i),this.currentStroke.push({x:s,y:i,color:this.currentColor,size:this.currentSize}),this.sendDrawingData({type:"draw",strokeId:this.strokeId,points:this.currentStroke,userId:this.userId}),this.lastX=s,this.lastY=i,this.lastTimestamp=n,this.lastVelocity=r}drawSmoothLine(t,e){if(this.points.length<4){const g=this.calculateTaperedSize(this.currentSize);this.drawLine(this.lastX,this.lastY,t,e,this.currentColor,g);return}const s=this.points.length,i=s>=6?this.points[s-6]:this.points[0],n=s>=5?this.points[s-5]:this.points[0],o=this.points[s-4],c=this.points[s-3],r=this.points[s-2],h=this.points[s-1],a=this.applyMultiPointSmoothing([i,n,o,c,r]),l=this.applyMultiPointSmoothing([n,o,c,r,h]),u=this.calculateAdaptiveControlPoint(a[1],a[2],a[3],!0),m=this.calculateAdaptiveControlPoint(l[1],l[2],l[3],!1),y=this.calculateTaperedSize(this.currentSize);this.drawAdvancedTaperedBezier(a[2],u,m,l[2],y)}applyMultiPointSmoothing(t){if(t.length<3)return t;const e=[];e.push(t[0]);for(let s=1;s<t.length-1;s++){const i=t[s-1],n=t[s],o=t[s+1],c={x:i.x*.2+n.x*.6+o.x*.2,y:i.y*.2+n.y*.6+o.y*.2,timestamp:n.timestamp};e.push(c)}return e.push(t[t.length-1]),e}calculateAdaptiveControlPoint(t,e,s,i){const n=this.smoothing*.25,o=e.x-t.x,c=e.y-t.y,r=s.x-e.x,h=s.y-e.y,u=Math.abs(Math.atan2(c,o)-Math.atan2(h,r))>Math.PI/3?n*.5:n;return i?{x:e.x+(s.x-t.x)*u,y:e.y+(s.y-t.y)*u}:{x:e.x-(s.x-t.x)*u,y:e.y-(s.y-t.y)*u}}drawAdvancedTaperedBezier(t,e,s,i,n){this.ctx.globalCompositeOperation="source-over",this.ctx.strokeStyle=this.currentColor,this.ctx.lineWidth=n,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.imageSmoothingEnabled=!0,this.ctx.imageSmoothingQuality="high",n<2?this.ctx.globalAlpha=.8+n/2*.2:this.ctx.globalAlpha=1,this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.bezierCurveTo(e.x,e.y,s.x,s.y,i.x,i.y),this.ctx.stroke(),this.ctx.globalAlpha=1}calculateTaperedSize(t){if(this.taper===0||this.velocityHistory.length===0)return t;let e=0,s=0;for(let a=0;a<this.velocityHistory.length;a++){const l=a+1;e+=this.velocityHistory[a]*l,s+=l}const i=e/s,o=Math.min(i/2.5,1),r=1-o*o*(3-2*o)*this.taper*.75,h=t*.25;return Math.max(t*r,h)}drawTaperedBezier(t,e,s,i,n){this.ctx.globalCompositeOperation="source-over",this.ctx.strokeStyle=this.currentColor,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineWidth=n,this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.bezierCurveTo(e.x,e.y,s.x,s.y,i.x,i.y),this.ctx.stroke()}averagePoint(t,e,s){return{x:(t.x+e.x+s.x)/3,y:(t.y+e.y+s.y)/3}}calculateControlPoint(t,e,s,i){const n=this.smoothing*.2;return i?{x:e.x+(s.x-t.x)*n,y:e.y+(s.y-t.y)*n}:{x:e.x-(s.x-t.x)*n,y:e.y-(s.y-t.y)*n}}stopDrawing(){this.isDrawing&&(this.isDrawing=!1,this.currentStroke.length>0&&this.sendDrawingData({type:"strokeComplete",strokeId:this.strokeId,points:this.currentStroke,userId:this.userId}),this.currentStroke=[])}handleTouchStart(t){t.preventDefault();const e=t.touches[0],s=this.canvas.getBoundingClientRect();this.isDrawing=!0,this.lastTouchX=e.clientX-s.left,this.lastTouchY=e.clientY-s.top,this.lastX=this.lastTouchX,this.lastY=this.lastTouchY,this.points=[{x:this.lastX,y:this.lastY,timestamp:Date.now(),velocity:0,acceleration:0}],this.velocityHistory=[0],this.accelerationHistory=[0],this.lastTimestamp=Date.now(),this.lastVelocity=0,this.currentStroke=[{x:this.lastX,y:this.lastY,color:this.currentColor,size:this.currentSize}],this.strokeId++}handleTouchMove(t){if(t.preventDefault(),!this.isDrawing)return;const e=t.touches[0],s=this.canvas.getBoundingClientRect(),i=e.clientX-s.left,n=e.clientY-s.top,o=Date.now(),c=Math.sqrt(Math.pow(i-this.lastX,2)+Math.pow(n-this.lastY,2)),r=o-this.lastTimestamp,h=r>0?c/r:0,a=Math.max(this.minDistance*.3,Math.min(this.minDistance*1.5,this.minDistance*(1+h*.2)));if(c<a)return;const l=Math.abs(h-this.lastVelocity)/Math.max(r,1);this.velocityHistory.push(h),this.accelerationHistory.push(l),this.velocityHistory.length>8&&(this.velocityHistory.shift(),this.accelerationHistory.shift()),this.points.push({x:i,y:n,timestamp:o,velocity:h,acceleration:l}),this.points.length>12&&this.points.shift(),this.drawSmoothLine(i,n),this.currentStroke.push({x:i,y:n,color:this.currentColor,size:this.currentSize}),this.sendDrawingData({type:"draw",strokeId:this.strokeId,points:this.currentStroke,userId:this.userId}),this.lastX=i,this.lastY=n,this.lastTimestamp=o,this.lastVelocity=h}drawLine(t,e,s,i,n,o){this.ctx.globalCompositeOperation="source-over",this.ctx.strokeStyle=n,this.ctx.lineWidth=o,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(s,i),this.ctx.stroke()}sendDrawingData(t){console.log("Drawing data:",t)}sendCursorPosition(t){const e=this.canvas.getBoundingClientRect();t.clientX-e.left,t.clientY-e.top}clearCanvas(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.sendDrawingData({type:"clear",userId:this.userId})}saveCanvas(){const t=document.createElement("a");t.download=`collaborative-canvas-${Date.now()}.png`,t.href=this.canvas.toDataURL(),t.click()}updateConnectionStatus(t,e){const s=document.getElementById("status-indicator"),i=document.getElementById("status-text");s.className=`status-indicator ${t}`,i.textContent=e}updateUserCount(t){document.getElementById("user-count").textContent=`${t} user${t!==1?"s":""} online`}addUser(t,e,s){this.users.set(t,{name:e,color:s}),this.updateUsersList(),this.updateUserCount(this.users.size)}removeUser(t){this.users.delete(t),this.removeCursor(t),this.updateUsersList(),this.updateUserCount(this.users.size)}updateUsersList(){const t=document.getElementById("users-list");t.innerHTML="",this.users.forEach((e,s)=>{const i=document.createElement("div");i.className="user-item",i.innerHTML=`
                <div class="user-color" style="background-color: ${e.color}"></div>
                <span>${e.name}</span>
            `,t.appendChild(i)})}showCursor(t,e,s){if(!this.users.has(t))return;const i=this.users.get(t);let n=this.cursors.get(t);n||(n=document.createElement("div"),n.className="user-cursor",n.setAttribute("data-username",i.name),n.style.borderColor=i.color,n.style.backgroundColor=i.color+"40",document.getElementById("cursors-layer").appendChild(n),this.cursors.set(t,n)),n.style.left=e+"px",n.style.top=s+"px",n.style.display="block"}removeCursor(t){const e=this.cursors.get(t);e&&(e.remove(),this.cursors.delete(t))}}document.addEventListener("DOMContentLoaded",()=>{new p().init()});
